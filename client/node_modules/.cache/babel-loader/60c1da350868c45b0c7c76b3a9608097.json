{"ast":null,"code":"import axios from 'axios';\nexport default class PizzaService {\n  constructor() {}\n\n  async createNewPizza(pirat) {\n    try {\n      const addPirate = await axios.post('http://localhost:8000/api/pizzas/new', pirat);\n      console.log(addPirate);\n      return addPirate.data.pirates;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  async getOneSingleizza(id) {\n    try {\n      const pirate = await axios.get(`http://localhost:8000/api/pizzas/${id}`);\n      return pirate.data.pirate;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  async getAllPizza() {\n    try {\n      const PirateList = await axios.get('http://localhost:8000/api/pizzas');\n      console.log(PirateList);\n      return PirateList.data.pirates;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  async updatePizza(id, Pirate) {\n    try {\n      const updatedPirate = await axios.put(`http://localhost:8000/api/pizzas/update/${id}`, Pirate);\n      return updatedPirate.data.pirates;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  async deletePizza(id) {\n    try {\n      const deletePirate = await axios.delete(`http://localhost:8000/api/pizzas/delete/${id}`);\n      return deletePirate.data.response;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  async registerUser(user) {\n    try {\n      const response = await axios.post('http://localhost:8000/api/users/new', user);\n      return response.data.user;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  async loginUser(user) {\n    try {\n      const response = await axios.post('http://localhost:8000/api/users/login', user);\n      return response.data.user;\n    } catch (err) {\n      return err;\n    }\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/arnaldoquezadaramirez/Desktop/BootCampCodingDojo/proyectos/pizza-time/client/src/services/pizzaServices.js"],"names":["axios","PizzaService","constructor","createNewPizza","pirat","addPirate","post","console","log","data","pirates","err","getOneSingleizza","id","pirate","get","getAllPizza","PirateList","error","updatePizza","Pirate","updatedPirate","put","deletePizza","deletePirate","delete","response","registerUser","user","loginUser"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,YAAN,CAAmB;AAE9BC,EAAAA,WAAW,GAAG,CAAE;;AAEI,QAAdC,cAAc,CAACC,KAAD,EAAO;AACvB,QAAG;AACC,YAAMC,SAAS,GAAG,MAAML,KAAK,CAACM,IAAN,CAAW,sCAAX,EAAmDF,KAAnD,CAAxB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACA,aAAOA,SAAS,CAACI,IAAV,CAAeC,OAAtB;AACH,KAJD,CAIC,OAAMC,GAAN,EAAU;AACP,aAAOA,GAAP;AACH;AACJ;;AAEqB,QAAhBC,gBAAgB,CAACC,EAAD,EAAK;AACvB,QAAI;AACA,YAAMC,MAAM,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAW,oCAAmCF,EAAG,EAAjD,CAArB;AACA,aAAOC,MAAM,CAACL,IAAP,CAAYK,MAAnB;AACH,KAHD,CAGE,OAAMH,GAAN,EAAW;AACT,aAAOA,GAAP;AACH;AACJ;;AAEgB,QAAXK,WAAW,GAAG;AACf,QAAI;AACD,YAAMC,UAAU,GAAG,MAAMjB,KAAK,CAACe,GAAN,CAAU,kCAAV,CAAzB;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYS,UAAZ;AACA,aAAOA,UAAU,CAACR,IAAX,CAAgBC,OAAvB;AAEH,KALA,CAKC,OAAOQ,KAAP,EAAc;AACZ,aAAOA,KAAP;AACH;AACJ;;AAEgB,QAAXC,WAAW,CAACN,EAAD,EAAKO,MAAL,EAAa;AAC1B,QAAI;AACA,YAAMC,aAAa,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAAW,2CAA0CT,EAAG,EAAxD,EAA2DO,MAA3D,CAA5B;AACA,aAAOC,aAAa,CAACZ,IAAd,CAAmBC,OAA1B;AACH,KAHD,CAGE,OAAMC,GAAN,EAAW;AACT,aAAOA,GAAP;AACH;AACJ;;AAEgB,QAAXY,WAAW,CAACV,EAAD,EAAK;AAClB,QAAG;AACC,YAAMW,YAAY,GAAG,MAAMxB,KAAK,CAACyB,MAAN,CAAc,2CAA0CZ,EAAG,EAA3D,CAA3B;AACA,aAAOW,YAAY,CAACf,IAAb,CAAkBiB,QAAzB;AACH,KAHD,CAGE,OAAMf,GAAN,EAAW;AACT,aAAOA,GAAP;AACH;AACJ;;AAEiB,QAAZgB,YAAY,CAACC,IAAD,EAAO;AACrB,QAAI;AACA,YAAMF,QAAQ,GAAG,MAAM1B,KAAK,CAACM,IAAN,CAAW,qCAAX,EAAkDsB,IAAlD,CAAvB;AACA,aAAOF,QAAQ,CAACjB,IAAT,CAAcmB,IAArB;AAEH,KAJD,CAIE,OAAMjB,GAAN,EAAW;AACT,aAAOA,GAAP;AACH;AACJ;;AAEc,QAATkB,SAAS,CAACD,IAAD,EAAO;AAClB,QAAI;AACA,YAAMF,QAAQ,GAAG,MAAM1B,KAAK,CAACM,IAAN,CAAW,uCAAX,EAAoDsB,IAApD,CAAvB;AACA,aAAOF,QAAQ,CAACjB,IAAT,CAAcmB,IAArB;AAEH,KAJD,CAIE,OAAMjB,GAAN,EAAW;AACT,aAAOA,GAAP;AACH;AACJ;;AAtE6B;AA0EjC","sourcesContent":["import axios from 'axios';\n\nexport default class PizzaService {\n\n    constructor() {}\n\n    async createNewPizza(pirat){\n        try{\n            const addPirate = await axios.post('http://localhost:8000/api/pizzas/new', pirat);\n            console.log(addPirate);\n            return addPirate.data.pirates;\n        }catch(err){\n            return err;\n        }\n    }\n\n    async getOneSingleizza(id) {\n        try {\n            const pirate = await axios.get(`http://localhost:8000/api/pizzas/${id}`)\n            return pirate.data.pirate;\n        } catch(err) {\n            return err;\n        }\n    };\n\n    async getAllPizza() {\n         try {\n            const PirateList = await axios.get('http://localhost:8000/api/pizzas');\n            console.log(PirateList)\n            return PirateList.data.pirates;\n\n        } catch (error) {\n            return error;\n        }\n    }\n\n    async updatePizza(id, Pirate) {\n        try {\n            const updatedPirate = await axios.put(`http://localhost:8000/api/pizzas/update/${id}`, Pirate)\n            return updatedPirate.data.pirates;\n        } catch(err) {\n            return err;\n        }\n    }\n\n    async deletePizza(id) {\n        try{\n            const deletePirate = await axios.delete(`http://localhost:8000/api/pizzas/delete/${id}`)\n            return deletePirate.data.response;\n        } catch(err) {\n            return err;\n        }\n    }\n\n    async registerUser(user) {\n        try {\n            const response = await axios.post('http://localhost:8000/api/users/new', user);\n            return response.data.user;\n\n        } catch(err) {\n            return err;\n        }\n    }\n\n    async loginUser(user) {\n        try {\n            const response = await axios.post('http://localhost:8000/api/users/login', user);\n            return response.data.user;\n\n        } catch(err) {\n            return err;\n        }\n    }\n\n\n\n};"]},"metadata":{},"sourceType":"module"}